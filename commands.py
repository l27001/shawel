from os.path import isfile, isdir
from os import listdir, mkdir
from collections import deque
import time, datetime, random, re, timeit, json
from config import groupid
from methods import Methods
from other import dir_path, blackwords
from demotivator.demotiv import demotiv
from gdz.gdz import gdz as get_gdz
from voice.voice import mk_voice
import qiwi
from zerkalo.zerkalo import zerkalo
from text.text import text as mk_text

class Commands:

    def __init__(self, response):
        today = datetime.datetime.today()
        if(DEBUG == True):
            extime = timeit.default_timer()
            print(today.strftime("%H:%M:%S %d.%m.%Y")+ ": "+str(response))
        obj = response['object']['message']
        if 'reply_message' in obj:
            replid = obj['reply_message']['from_id']
        else:
            replid = ''
        from_id = obj['from_id']
        chat_id = obj['peer_id']
        text = obj['text']
        if(from_id < 1 or text == ''):
            return None
        userr = Methods.users_get(from_id)
        userr = userr[0]['last_name']+" "+userr[0]['first_name']
        if(chat_id == from_id):
            who = f"–æ—Ç {userr}[{str(from_id)}]"
        else:
            who = f"–≤ {str(chat_id)} –æ—Ç {userr}[{str(from_id)}]"
        userinfo = Methods.mysql_query("SELECT * FROM users WHERE vkid='"+str(from_id)+"' LIMIT 1")
        if(userinfo == None):
            Methods.mysql_query(f"INSERT INTO users (`vkid`) VALUES ('{from_id}')")
            userinfo = Methods.mysql_query(f"SELECT * FROM users WHERE vkid='{from_id}' LIMIT 1")
        tlog = text.replace("\n",r" \n ")
        Methods.log("Message", f"'{tlog}' {who}")
        if(chat_id != from_id):
            curtime = int(time.time())
            m = Methods.mysql_query(f"SELECT * FROM mute WHERE vkid = {from_id} AND chatid = {chat_id}")
            if(m != None):
                if(curtime > m['date']):
                    Methods.mysql_query(f"DELETE FROM mute WHERE vkid = {from_id} AND chatid = {chat_id}")
                else:
                    if(m['warn']+1 < 3):
                        Methods.mysql_query(f"UPDATE mute SET warn = warn + 1 WHERE vkid = {from_id} AND chatid = {chat_id}")
                        if(Methods.is_message_allowed(from_id) == 1):
                            Methods.send(from_id,f"–í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –º—É—Ç–µ. [{m['warn']+1}/3]")
                        else:
                            Methods.send(chat_id,f"[id{from_id}|{userr}] –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –º—É—Ç–µ. [{m['warn']+1}/3]")
                    else:
                        Methods.kick_user(chat_id,from_id)
                    return None
        if('payload' in obj):
            try:
                obj['payload'] = json.loads(obj['payload'])
                if('command' in obj['payload'] and obj['payload']['command'] == "internal_command"):
                    if(obj['payload']['action']['type'] == "intent_unsubscribe"):
                        Methods.mysql_query(f"UPDATE users SET raspisanie='0' WHERE vkid='{from_id}'")
                        Methods.send(from_id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", keyboard=Methods.construct_keyboard(b1=Methods.make_button(type="intent_subscribe",peer_id=from_id,intent="non_promo_newsletter",label="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),inline="true"))
                    elif(obj['payload']['action']['type'] == "intent_subscribe"):
                        Methods.mysql_query(f"UPDATE users SET raspisanie='1' WHERE vkid='{from_id}'")
                        Methods.send(from_id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", keyboard=Methods.construct_keyboard(b2=Methods.make_button(type="intent_unsubscribe",peer_id=from_id,intent="non_promo_newsletter",label="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"),inline="true"))
                    return None
            except TypeError: pass
            userinfo.update({'payload':obj['payload']})
        text = text.split(' ')
        if(re.match(rf"\[(club|public){groupid}\|(@|\*){scrname}\]", text[0])):
            text.pop(0)
        if(chat_id > 2000000000 and text[0][0] != '/'):
            return None
        elif(chat_id > 2000000000):
            chatinfo = Methods.mysql_query(f"SELECT * FROM chats WHERE id = '{chat_id}' LIMIT 1")
            if(chatinfo == None):
                Methods.mysql_query(f"INSERT INTO chats (`id`) VALUES ({chat_id})")
                chatinfo = Methods.mysql_query(f"SELECT * FROM chats WHERE id = '{chat_id}' LIMIT 1")
            userinfo.update({'chatinfo':chatinfo})
        try:
            text[0] = text[0].lower()
            text[0] = text[0].replace('/','')
            userinfo.update({'replid':replid,'chat_id':chat_id, 'from_id':from_id, 'attachments':obj['attachments']})
            if(cmds.get(text[0]) == None):
                if(chat_id < 2000000000):
                    Methods.send(chat_id, "üëéüèª –ù–µ –ø–æ–Ω—è–ª.")
                return None
            cmds[text[0]](userinfo, text[1:])
        except Exception as e:
            Methods.log("ERROR", f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. {str(e)}")
            Methods.send(chat_id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @l27001", attachment="photo-183256712_457239188")
            raise
        if(DEBUG == True):
            Methods.log("Debug", f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(timeit.default_timer()-extime)}")

    def info(userinfo, text):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–≤–µ–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º."""
        if(len(text) < 1):
            text.insert(0, str(userinfo['from_id']))
        t = re.findall(r'\[.*\|', text[0])
        try:
            t = t[0].replace("[", "").replace("|", "")
        except IndexError:
            t = text[0]
        if('payload' in userinfo):
            t = userinfo['payload']
        try:
            uinfo = Methods.users_get(t)
        except Exception as e:
            if(e.code == 113):
                Methods.send(userinfo['chat_id'], "‚ö† Invalid user_id")
                return 0
        name = f"[id{uinfo[0]['id']}|{uinfo[0]['last_name']} {uinfo[0]['first_name']}]"
        uinfo = Methods.mysql_query(f"SELECT * FROM users WHERE vkid='{uinfo[0]['id']}' LIMIT 1")
        if(uinfo == None):
            Methods.send(userinfo['chat_id'], "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return 0
        if(uinfo['raspisanie'] == 0):
            raspisanie = '–†–∞—Å—Å—ã–ª–∫–∞: –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω'
        else:
            raspisanie = '–†–∞—Å—Å—ã–ª–∫–∞: –ü–æ–¥–ø–∏—Å–∞–Ω'
        if(userinfo['chat_id'] != userinfo['from_id']):
            ch = f"\nChat-ID: {userinfo['chat_id']}"
        else:
            ch = ''
        keyb = Methods.construct_keyboard(b77=Methods.make_button(color="secondary", label="/get", payload=str(uinfo['vkid'])), b3=Methods.make_button(label="/–ø–æ–ª–∏–≤", color="primary"), inline="true", b1=Methods.make_button(label="/—Ç–æ–ø", color="positive"), b2=Methods.make_button(label="/—Ä–∞—Å—Å—ã–ª–∫–∞", color="secondary"))
        Methods.send(userinfo['chat_id'], "–ò–º—è: "+name+"\nVKID: "+str(uinfo['vkid'])+"\nDostup: "+str(uinfo['dostup'])+"\nEXP: "+str(uinfo['EXP'])+"\n"+raspisanie+ch, keyboard=keyb, disable_mentions=1)

    def time(userinfo, text):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
        Methods.send(userinfo['chat_id'], "üïí –¢–µ–∫—É—â–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è "+datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')+"\nUnix-time: "+str(int(time.time())))

    def test(userinfo, text):
        """–¢–µ—Å—Ç"""
        Methods.send(userinfo['chat_id'], f"{scrname} by @l27001\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {acmds}\n–û—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {aerrs}\nDebug: {DEBUG}\n–ó–∞–ø—É—â–µ–Ω: {timestart.strftime('%Y-%m-%d %H:%M:%S')}\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.datetime.now()-timestart}", disable_mentions=1)

    def goose(userinfo, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—É—Å—è"""
        if(len(text) >= 1):
            if(text[0].lower() == '—à'):
                Methods.send(userinfo['chat_id'], "", 'doc242730929_570000336')
            else:
                Methods.send(userinfo['chat_id'], "", 'doc242730929_570296408')
        else:
            Methods.send(userinfo['chat_id'], "", 'doc242730929_570296408')

    def clrkeyb(userinfo, text):
        """"""
        Methods.send(userinfo['chat_id'], "Clear keyboard", keyboard='{"buttons":[]}')

    def random(userinfo, text):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞"""
        if(len(text) < 2):
            Methods.send(userinfo['chat_id'], "‚ö† /random [from] [to]")
        else:
            try:
                Methods.send(userinfo['chat_id'], "üé≤ –í—ã–ø–∞–ª–æ: "+str(random.randint(int(text[0]), int(text[1]))))
            except ValueError:
                Methods.send(userinfo['chat_id'], "‚ö† /random [from] [to]")

    def vlaga(userinfo, text):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –©–∞–≤–µ–ª—è"""
        vlaga = Methods.mysql_query("SELECT vlaga FROM vk")['vlaga']
        Methods.send(userinfo['chat_id'], "–í–ª–∞–∂–Ω–æ—Å—Ç—å –©–∞–≤–µ–ª—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "+str(vlaga)+"%")

    def weather(userinfo, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≥–æ–¥—É. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥, –≤—ã–≤–µ–¥–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≠–Ω–≥–µ–ª—å—Å–µ"""
        if(len(text) < 1):
            a = "–≠–Ω–≥–µ–ª—å—Å"
        else:
            a = " ".join(text)
        weather = Methods.get_weather(a)
        if(weather['cod'] == "404"):
            Methods.send(userinfo['chat_id'], "‚ö† –ì–æ—Ä–æ–¥ "+a+" –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã.")
        elif(weather['cod'] != 200):
            Methods.send(userinfo['chat_id'], "‚ö† –°–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        else:
            icon = weather['weather'][0]['icon']
            if(icon == '01d' or icon == '01n'):
                icon = "‚òÄ"
            elif(icon == '02d' or icon == '02n'):
                icon = "üå§"
            elif(icon == '03d' or icon == '03n'):
                icon = "‚òÅ"
            elif(icon == '04d' or icon == '04n'):
                icon = "‚òÅ"
            elif(icon == '09d' or icon == '09n'):
                icon = "üåß"
            elif(icon == '10d' or icon == '10n'):
                icon = "üåß"
            elif(icon == '11d' or icon == '11n'):
                icon = "üå©"
            elif(icon == '13d' or icon == '13n'):
                icon = "üå®"
            elif(icon == '50d' or icon == '50n'):
                icon = "üå´"
            Methods.send(userinfo['chat_id'], "–ü–æ–≥–æ–¥–∞ –≤ "+weather['name']+"\n‚îú –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: "+datetime.datetime.utcfromtimestamp(weather['dt']+weather['timezone']).strftime('%Y-%m-%d %H:%M:%S')+"\n‚îú –°—Ç–∞—Ç—É—Å: "+icon+" "+weather['weather'][0]['description']+"\n‚îú –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: "+str(weather['main']['temp'])+" ¬∞–°\n‚îú –í–µ—Ç–µ—Ä: "+str(weather['wind']['speed'])+" –º/c\n‚îú –í–ª–∞–∂–Ω–æ—Å—Ç—å: "+str(weather['main']['humidity'])+" %\n‚îî –î–∞–≤–ª–µ–Ω–∏–µ: "+str(weather['main']['pressure']*100)+" Pa\n–ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–∞–Ω –≤ "+datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S'));

    def top(userinfo, text):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø —Å–∞–¥–æ–≤–Ω–∏–∫–æ–≤"""
        data = Methods.mysql_query("SELECT EXP, vkid FROM users WHERE vkid!='500136993' and EXP!=0 ORDER BY EXP DESC LIMIT 10", fetch='all')
        a = len(data)
        i = 1
        for n in data:
            if(i <= 1):
                ids = str(n['vkid'])
            else:
                ids = ids+","+str(n['vkid'])
            i+=1
        user = Methods.users_get(ids)
        txt = ''
        expa = []
        for n in data:
            kx = Methods.get_level(n['EXP'])
            expa.append(kx['name'])
        i = 0
        while(i < a):
            txt = txt+"\n"+str(i+1)+") [id"+str(user[i]['id'])+"|"+user[i]['last_name']+" "+user[i]['first_name']+"] ["+expa[i]+"]: "+str(data[i]['EXP'])+" EXP"
            i+=1
        keyb = Methods.construct_keyboard(b1=Methods.make_button(label="/–ø–æ–ª–∏–≤", color="positive"), b4=Methods.make_button(label="/—É—Ä–æ–≤–µ–Ω—å", color="secondary"), b2=Methods.make_button(label="/–≤–ª–∞–≥–∞", color="negative"), b3=Methods.make_button(label="/–∏–Ω—Ñ–æ", color="primary"), inline="true")
        Methods.send(userinfo['chat_id'], f"–¢–æ–ø —Å–∞–¥–æ–≤–Ω–∏–∫–æ–≤:{txt}", keyboard=keyb, disable_mentions=1)

    def poliv(userinfo, text):
        """–ü–æ–ª–µ–π –©–∞–≤–µ–ª—è!"""
        bd_inf = Methods.mysql_query("SELECT vlaga,`time-poliv` FROM vk")
        if('chatinfo' in userinfo and userinfo['chatinfo']['game-cmds'] == 0):
            Methods.send(userinfo['chat_id'],"–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ.")
            return 0
        timee = int(time.time())
        if(bd_inf['time-poliv']+300 < timee):
            if(bd_inf['vlaga'] == 100):
                Methods.send(userinfo['chat_id'], "–í—ã –º–µ–Ω—è –∑–∞—Ç–æ–ø–∏—Ç—å —Ö–æ—Ç–∏—Ç–µ?")
            else:
                vl = random.randint(5, 15)
                if(vl+bd_inf['vlaga'] > 100):
                    vl = 100-bd_inf['vlaga']
                keyb = Methods.construct_keyboard(b1=Methods.make_button(label="/—Ç–æ–ø", color="positive"), b2=Methods.make_button(label="/–≤–ª–∞–≥–∞", color="negative"), b3=Methods.make_button(label="/–∏–Ω—Ñ–æ", color="primary"), inline="true")
                Methods.mysql_query(f"UPDATE users SET EXP=EXP+1 WHERE vkid='{userinfo['from_id']}'")
                Methods.mysql_query("UPDATE vk SET `time-poliv`='"+str(timee)+"', `vlaga`='"+str(bd_inf['vlaga']+vl)+"'")
                Methods.send(userinfo['chat_id'], "–í—ã –ø–æ–ª–∏–ª–∏ –©–∞–≤–µ–ª—è.\n–í–ª–∞–≥–∞: "+str(bd_inf['vlaga']+vl)+"%", keyboard=keyb)
                if(vl+bd_inf['vlaga'] == 100):
                    Methods.send(userinfo['chat_id'],"–í–ª–∞–≥–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ 100%. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +10 –±–æ–Ω—É—Å–Ω—ã—Ö EXP.")
                    Methods.mysql_query(f"UPDATE users SET EXP=EXP+10 WHERE vkid='{userinfo['from_id']}'")
                i = 0
                kx = Methods.get_level(userinfo['EXP'])
                kx1 = Methods.get_level(userinfo['EXP']+1)
                if(kx['name'] != kx1['name']):
                    keyb=Methods.construct_keyboard(b1=Methods.make_button(label="/—Ç–æ–ø"), b2=Methods.make_button(label="/—É—Ä–æ–≤–µ–Ω—å", color="secondary"), inline="true")
                    Methods.send(userinfo['chat_id'], f"–¢–´–©! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!\n–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {kx1['name']}\nEXP: {userinfo['EXP']+1}", keyboard=keyb)
        else:
            t = 300-(timee-bd_inf['time-poliv'])
            m = t//60
            t = t-m*60
            tim = str(m)+" –º–∏–Ω—É—Ç "+str(t)+" —Å–µ–∫—É–Ω–¥"
            Methods.send(userinfo['chat_id'], "–ü–æ–ª–∏–≤–∞—Ç—å –©–∞–≤–µ–ª—è –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç!\n–û—Å—Ç–∞–ª–æ—Å—å: "+tim)

    def raspisanie(userinfo, text):
        """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        rasp = Methods.mysql_query("SELECT rasp FROM vk")['rasp']
        Methods.send(userinfo['chat_id'], "https://shawel.ezdomain.ru\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", rasp)
        #Methods.send(userinfo['chat_id'], "–ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –ö–∞–Ω–∏–∫—É–ª—ã...")

    def send(userinfo, text):
        """/send"""
        if(userinfo['dostup'] < 2):
            Methods.send(userinfo['chat_id'], "‚õî –ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ!")
        elif(len(text) < 2):
            Methods.send(userinfo['chat_id'], "‚ö† /send [peer_id] [text]")                             
        else:
            try:
                int(text[0])
            except ValueError:
                Methods.send(userinfo['chat_id'], "‚ö† /send [peer_id] [text]") 
            i = 0
            ttext = " ".join(text[1:])
            if(text[0] == '0'):
                text[0] = '2000000015'
            attach = ''
            if(len(userinfo['attachments']) >= 1):
                if(userinfo['attachments'][0]['type'] == 'wall'):
                    attach = "wall"+str(userinfo['attachments'][0]['wall']['to_id'])+"_"+str(userinfo['attachments'][0]['wall']['id'])
                else:
                    i = 0
                    for n in userinfo['attachments']:
                        typ = n['type']
                        if(i == 0):
                            attach = typ+str(n[typ]['owner_id'])+"_"+str(n[typ]['id'])+"_"+str(n[typ]['access_key'])
                        else:
                            attach = attach+','+typ+str(n[typ]['owner_id'])+"_"+str(n[typ]['id'])+"_"+str(n[typ]['access_key'])
                        i+=1
            try:
                Methods.send(text[0], ttext, attach)
                if(int(userinfo['chat_id']) != int(text[0])):
                    Methods.send(userinfo['chat_id'], "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                if(e.code == 901):
                    Methods.send(userinfo['chat_id'], "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π!")

    def rass(userinfo, text):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if(userinfo['chat_id'] == userinfo['from_id']):
            if(userinfo['raspisanie'] == 0):
                Methods.send(userinfo['chat_id'],"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", keyboard=Methods.construct_keyboard(b1=Methods.make_button(type="intent_subscribe",peer_id=userinfo['from_id'],intent="non_promo_newsletter",label="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),inline="true"))
            else:
                Methods.send(userinfo['chat_id'],"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã", keyboard=Methods.construct_keyboard(b2=Methods.make_button(type="intent_unsubscribe",peer_id=userinfo['from_id'],intent="non_promo_newsletter",label="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"),inline="true"))
        else:
            count = Methods.mysql_query(f"SELECT COUNT(*) FROM `chats` WHERE id = {userinfo['chat_id']} AND raspisanie=1")['COUNT(*)']
            if(count != 1):
                Methods.mysql_query(f"UPDATE `chats` SET raspisanie=1 WHERE id='{userinfo['chat_id']}'")
                Methods.send(userinfo['chat_id'],"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏ –±–µ—Å–µ–¥—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–∏—á–Ω–æ –≤–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°.")
            else:
                Methods.mysql_query(f"UPDATE `chats` SET raspisanie=0 WHERE id='{userinfo['chat_id']}'")
                Methods.send(userinfo['chat_id'],"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏ –±–µ—Å–µ–¥—É –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–∏—á–Ω–æ –≤–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°.")

    def log(userinfo, text):
        """"""
        if(userinfo['dostup'] < 2):
            Methods.send(userinfo['chat_id'], "‚õî –ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ!")
        else:
            with open(dir_path+"/log/"+datetime.datetime.today().strftime("%d.%m.%Y")+".log") as f:
                a = " ".join(list(deque(f, 10)))
            Methods.send(userinfo['chat_id'], a, disable_mentions=1)

    def roma(userinfo, text):
        """"""
        Methods.send(userinfo['chat_id'], "–†–æ–º–∞ - –Ω–∞—á–∞–ª—å–Ω–∏–∫ –∞–≤—Ç–æ–¥—Ä–æ–º–∞")

    def valer(userinfo, text):
        """"""
        Methods.send(userinfo['chat_id'], "–ù–µ—Ç, –±–ª*—Ç—å, –ê–∫–∞–∫–∏–π")

    def ruslan(userinfo, text):
        """"""
        Methods.send(userinfo['chat_id'], "–ü–æ–ª–∫–∞–Ω")

    def kirill(userinfo, text):
        """"""
        a = random.randint(1, 3)
        if(a == 1):
            Methods.send(userinfo['chat_id'], "–•—ç–∑ –ª–∏–ª")
        elif(a == 2):
            Methods.send(userinfo['chat_id'], '–¢—ã - –º–µ—Ç–∏–ª, —Ç—ã - –º–µ—Ç–∏–ª,\n–ò –∑–æ–≤—É—Ç —Ç–µ–±—è –ö–∏—Ä–∏–ª–ª.\n"–û—á–µ–Ω—å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –º–µ—Ç–∏–ª".\n\n–¢—ã - –ö–∏—Ä–∏–ª–ª, —Ç—ã - –ö–∏—Ä–∏–ª–ª,\n–ò, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, has lil.\n"–û—á–µ–Ω—å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π", –ö–∏—Ä–∏–ª–ª...')
        else:
            Methods.send(userinfo['chat_id'], '–Ø —Ç–∞–∫ —Å—á–∞—Å—Ç–ª–∏–≤ –Ø —Ç–∞–∫ —Ä–∞–¥ —É –º–µ–Ω—è –µ—Å—Ç—å —Ç—ã —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—é –Ω–æ –≥–æ–≤–æ—Ä—é –ö–∏—Ä–∏–ª–ª —Å–æ—Å–∏')

    def vlad(userinfo, text):
        """"""
        Methods.send(userinfo['chat_id'], "–ù–µ—Ç, –≤–ª–¥–∞")

    def lera(userinfo, text):
        """"""
        Methods.send(userinfo['chat_id'], "–ü–æ—Ö*–π, –º—ã [–∫–∏–±–µ—Ä]–ø–∞–Ω–∫")

    def get(userinfo, text):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."""
        if(len(text) < 1):
            text.insert(0, str(userinfo['from_id']))
        t = re.findall(r'\[.*\|', text[0])
        try:
            t = t[0].replace("[","").replace("|","")
        except IndexError:
            t = text[0]
        if('payload' in userinfo):
            t = userinfo['payload']
        try:
            response = Methods.users_get(t, "sex,photo_id,bdate,online")
        except Exception as e:
            if(e.code == 113):
                Methods.send(userinfo['chat_id'], "‚ö† Invalid user_id '"+str(t)+"'")
                return 0
        txt = ""
        for n in response[0]:
            txt = txt+str(n)+" => "+str(response[0][n])+"\n"
        try:
            img = "photo"+response[0]['photo_id']
        except Exception:
            img = ""
        keyb = Methods.construct_keyboard(b1=Methods.make_button(color="secondary", label="/info", payload=str(response[0]['id'])), b2=Methods.make_button(label="/—Ç–æ–ø"), inline="true")
        Methods.send(userinfo['chat_id'], txt+"vk.com/id"+str(response[0]['id']), img, keyboard=keyb)

    def demotiv(userinfo, text):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä"""
        try:
            if(userinfo['attachments'][0]['type'] != 'photo'):
                Methods.send(userinfo['chat_id'], "‚ö† –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!\n\n/demotiv –°—Ç—Ä–æ–∫–∞ 1(–æ–±—è–∑–∞—Ç)\n—Å—Ç—Ä–æ–∫–∞ 2(–Ω–µ –æ–±—è–∑–∞—Ç)")
            else:
                text = " ".join(text)
                text1 = ''
                text2 = ''
                if "\n" in text:
                    text1 = re.findall('.*\n', text)[0].replace("\n", "")
                    text2 = re.findall('\n.*', text)[0].replace("\n", "")
                elif "|" in text:
                    text1 = re.findall(r'.*\|', text)[0].replace("|", "")
                    text2 = re.findall(r'\|.*', text)[0].replace("|", "")
                else:
                    text1 = text
                height = 0
                width = 0
                for n in userinfo['attachments'][0]['photo']['sizes']:
                    if(n['height'] > height or n['width'] > width):
                        height = n['height']
                        width = n['width']
                        url = n['url']
                demot = demotiv(text1, text2, url)
                response = Methods.upload_img(userinfo['from_id'], demot)
                Methods.send(userinfo['chat_id'], "", response)
        except (KeyError, IndexError):
                Methods.send(userinfo['chat_id'], "‚ö† –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!\n\n/demotiv –°—Ç—Ä–æ–∫–∞ 1(–æ–±—è–∑–∞—Ç)\n—Å—Ç—Ä–æ–∫–∞ 2(–Ω–µ –æ–±—è–∑–∞—Ç)")

    def invalid(userinfo, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–≤–∞–ª–∏–¥–∞"""
        r = random.randint(0, 1)
        if(userinfo['from_id'] == 524573062 or r == 0):
            Methods.send(userinfo['chat_id'], "–í—ã –∏–Ω–≤–∞–ª–∏–¥ üóø")
        else:
            Methods.send(userinfo['chat_id'], "‚úî –í—ã –Ω–µ –∏–Ω–≤–∞–ª–∏–¥")

    def help(userinfo, text):
        """–ü–æ–º–æ—â—å"""
        a = ''
        lock = ['dlist', '–¥–µ–¥–∏–∫–∏', 'ddos', 'except']
        pred = 0
        for i,n in cmds.items():
            if(i in lock):
                pred = n
                continue
            if(n == pred):
                continue
            pred = n
            if(n.__doc__ == None or n.__doc__ == ''):
                doc = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            else:
                doc = n.__doc__
            a = a +"\n/"+i+" - "+doc
        Methods.send(userinfo['chat_id'], a)

    def status(userinfo, text):
        """–°—Ç–∞—Ç—É—Å"""
        response = Methods.mysql_query("SELECT * FROM uptime WHERE status != '2'", fetch="all")
        if(response == ()):
            Methods.send(userinfo['chat_id'], "‚úî –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ.\n\nhttps://status.ezdomain.ru/")
        else:
            out = []
            for i in response:
                if(i['status'] == 9 or i['status'] == 8):
                    out.append(f"‚ö† {i['friendly_name']} –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                elif(i['status'] == 0):
                    out.append(f"‚ùì {i['friendly_name']} –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    out.append(f"‚ùì {i['friendly_name']} -> {i['status']}")
            Methods.send(userinfo['chat_id'], "\n".join(out)+"\n\nhttps://status.ezdomain.ru/")


    def aEXP(userinfo, text):
        """"""
        if(userinfo['dostup'] < 2):
            Methods.send(userinfo['chat_id'], "‚õî –ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ!")
        elif(len(text) < 2):
            Methods.send(userinfo['chat_id'], "‚ö† /aEXP [userid] [(-)EXP]")
        else:
            t = re.findall(r'\[.*\|', text[0])
            try:
                t = t[0].replace("[", "").replace("|", "")
            except IndexError:
                t = text[0]
            try:
                unfo = Methods.users_get(t)
            except Exception as e:
                if(e.code == 113):
                    Methods.send(userinfo['chat_id'], "‚ö† Invalid user_id")
                    return 0
            uinfo = Methods.mysql_query(f"SELECT * FROM users WHERE vkid='{unfo[0]['id']}' LIMIT 1")
            if(uinfo == None):
                Methods.send(userinfo['chat_id'], "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            else:
                try:
                    text[1] = int(text[1])
                    if(text[1] < 0):
                        text[1] = str(text[1])
                        do = "–£–¥–∞–ª–µ–Ω–æ"
                    elif(text[1] > 0):
                        text[1] = "+"+str(text[1])
                        do = "–î–æ–±–∞–≤–ª–µ–Ω–æ"
                    else:
                        Methods.send(userinfo['chat_id'], "‚ö† –í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ")
                        return 0
                except ValueError:
                    Methods.send(userinfo['chat_id'], "‚ö† –í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ")
                    return 0
                Methods.mysql_query("UPDATE users SET EXP=EXP"+text[1]+" WHERE vkid='"+str(uinfo['vkid'])+"' LIMIT 1")
                Methods.send(userinfo['chat_id'], "‚úî "+do+" "+text[1]+" EXP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "+unfo[0]['last_name']+" "+unfo[0]['first_name'])

    def spam(userinfo, text):
        """"""
        if(userinfo['dostup'] < 2):
            Methods.send(userinfo['chat_id'], "‚õî –ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ!")
        elif(len(text) < 2):
            Methods.send(userinfo['chat_id'], "‚ö† /spam [peer_id] [text]")                             
        else:
            try:
                int(text[0])
            except ValueError:
                Methods.send(userinfo['chat_id'], "‚ö† /spam [peer_id] [text]") 
            i = 0
            ttext = " ".join(text[1:])
            attach = ''
            if(len(userinfo['attachments']) >= 1):
                if(userinfo['attachments'][0]['type'] == 'wall'):
                    attach = "wall"+str(userinfo['attachments'][0]['wall']['to_id'])+"_"+str(userinfo['attachments'][0]['wall']['id'])
                else:
                    i = 0
                    for n in userinfo['attachments']:
                        typ = n['type']
                        if(i == 0):
                            attach = typ+str(n[typ]['owner_id'])+"_"+str(n[typ]['id'])+"_"+str(n[typ]['access_key'])
                        else:
                            attach = attach+','+typ+str(n[typ]['owner_id'])+"_"+str(n[typ]['id'])+"_"+str(n[typ]['access_key'])
                        i+=1
            try:
                for i in  range(10):
                    Methods.send(text[0], ttext, attach)
                if(int(userinfo['chat_id']) != int(text[0])):
                    Methods.send(userinfo['chat_id'], "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                if(e.code == 901):
                    Methods.send(userinfo['chat_id'], "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π!")

    def nul(userinfo, text):
        """"""
        if(userinfo['dostup'] < 2):
            Methods.send(userinfo['chat_id'], "‚õî –ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ!")
        else:
            Methods.mysql_query("UPDATE `vk` SET `time-poliv`=3")
            Methods.send(userinfo['chat_id'], "‚úî Success!")

    def level(userinfo, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å"""
        kx = Methods.get_level(userinfo['EXP'])
        lvl = kx['name']
        lvlnext = kx['exp']
        nexp = lvlnext - userinfo['EXP']
        keyb = Methods.construct_keyboard(inline="true", b1=Methods.make_button(label="/—Ç–æ–ø", color="positive"), b2=Methods.make_button(label="/–∏–Ω—Ñ–æ"))
        Methods.send(userinfo['chat_id'], f"üèÖ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {lvl}\nEXP: {userinfo['EXP']}\n–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ {nexp} EXP", keyboard=keyb)

    def autopoliv(userinfo, text):
        """–ü—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Å—ã—Ö–∞–Ω–∏—è –©–∞–≤–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        autopoliv = Methods.mysql_query("SELECT autopoliv FROM vk")['autopoliv']
        timee = int(time.time())
        if(autopoliv >= timee):
            Methods.send(userinfo['chat_id'], "‚ö† –ê–≤—Ç–æ–ø–æ–ª–∏–≤ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        else:
            if(len(text) < 1):
                Methods.send(userinfo['chat_id'], "‚Ñπ –ê–≤—Ç–æ–ø–æ–ª–∏–≤.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–∞–≤—Ç–æ–ø–æ–ª–∏–≤ [–∫–æ–ª-–≤–æ —á–∞—Å–æ–≤]\n–©–∞–≤–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—ã—Ö–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤.\n1 —á–∞—Å –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞ = 20 EXP.")
            else:
                try:
                    n = int(text[0])
                except ValueError:
                    Methods.send(userinfo['chat_id'], "‚ö† –í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ.")
                if(n < 1 or n > 12):
                    Methods.send(userinfo['chat_id'], "‚ö† –î–æ–ø—É—Å—Ç–∏–º—ã –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 12 —á–∞—Å–æ–≤.")
                else:
                    if(userinfo['EXP'] < n*20):
                        Methods.send(userinfo['chat_id'], "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EXP!")
                    else:
                        d = timee+3600*n
                        pr = time.strftime("%H:%M", time.localtime(d))
                        Methods.mysql_query(f"UPDATE vk SET autopoliv={d}")
                        Methods.mysql_query(f"UPDATE users SET `EXP`=`EXP`-{n*20} WHERE vkid={userinfo['from_id']}")
                        keyb = Methods.construct_keyboard(inline="true", b1=Methods.make_button(label="/—Ç–æ–ø", color="positive"), b2=Methods.make_button(label="/–ø–æ–ª–∏–≤"), b3=Methods.make_button(color="secondary", label="/–≤–ª–∞–≥–∞"))
                        Methods.send(userinfo['chat_id'], f"‚úî –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–≤—Ç–æ–ø–æ–ª–∏–≤ –Ω–∞ {n} —á–∞—Å–æ–≤.\n–ê–≤—Ç–æ–ø–æ–ª–∏–≤ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {pr}.\n–°–ø–∏—Å–∞–Ω–æ {n*20} EXP", keyboard=keyb)

    def gdz(userinfo, text):
        """–ì–î–ó"""
        if(len(text) < 2):
            Methods.send(userinfo['chat_id'], "‚ö† /gdz [–ø—Ä–µ–¥–º–µ—Ç] [–Ω–æ–º–µ—Ä/—Å—Ç—Ä–∞–Ω–∏—Ü–∞]")
            return 0
        try:
            nom = int(text[1])
            if(nom < 1):
                raise('<1')
        except:
            Methods.send(userinfo['chat_id'], "‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. /gdz [–ø—Ä–µ–¥–º–µ—Ç] [–Ω–æ–º–µ—Ä/—Å—Ç—Ä–∞–Ω–∏—Ü–∞]")
            return 0
        a = get_gdz(text[0], nom)
        if(a == 1):
            Methods.send(userinfo['chat_id'], "‚ö† –ù–æ–º–µ—Ä/—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return 0
        if(a == 2):
            Methods.send(userinfo['chat_id'], "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç. /gdz [–ø—Ä–µ–¥–º–µ—Ç] [–Ω–æ–º–µ—Ä/—Å—Ç—Ä–∞–Ω–∏—Ü–∞] –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n–ê–ª–≥–µ–±—Ä–∞\n–ì–µ–æ–º–µ—Ç—Ä–∏—è\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
            return 0
        i = 0
        b = []
        for n in a:
            i+=1
            path = f"{dir_path}/gdz/files/{text[0].lower()}_{nom}_{i}.jpg"
            if(isfile(path) == False):
                Methods.download_img(n, path)
            b.append(Methods.upload_img(userinfo['from_id'], path))
        Methods.send(userinfo['chat_id'], f"{nom}", ",".join(b))

    def kazik(userinfo, text):
        """–ö–∞–∑–∏–Ω–æ"""
        if('chatinfo' in userinfo and userinfo['chatinfo']['game-cmds'] == 0):
            Methods.send(userinfo['chat_id'],"–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ.")
            return 0
        if(len(text) < 2):
            Methods.send(userinfo['chat_id'], "‚ö† /–∫–∞–∑–∏–Ω–æ [—Å—Ç–∞–≤–∫–∞] [1/2]\n\n1 - –í—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n2 - –í—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ –æ—Ç 101 –¥–æ 200")
            return 0
        try:
            stav = int(text[0])
            if(stav < 1):
                raise ValueError
            y = int(text[1])
            if(y < 1 or y > 2):
                raise ValueError
        except ValueError:
            Methods.send(userinfo['chat_id'], "‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. /–∫–∞–∑–∏–Ω–æ [—Å—Ç–∞–≤–∫–∞] [1/2]\n\n1 - –í—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n2 - –í—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ –æ—Ç 101 –¥–æ 200")
            return 0
        if(stav < 5 and userinfo['EXP'] > 5):
            Methods.send(userinfo['chat_id'],"‚ö† –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5-—Ç–∏.")
            return 0
        if(stav > userinfo['EXP']):
            Methods.send(userinfo['chat_id'], f"‚ö† –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ EXP.\n–í–∞—à–∏ EXP {userinfo['EXP']}")
            return 0
        if(userinfo['dostup'] > 0 and len(text) >= 3):
            try:
                win = int(text[2])
                if(win < 1 or win > 200): raise ValueError
            except ValueError:
                win = random.randint(1, 200)
        else:
            win = random.randint(1, 200)
        tt = f"\n–í—ã–ø–∞–ª–æ {win}."
        keyb = Methods.construct_keyboard(b1=Methods.make_button(color="secondary", label="/—É—Ä–æ–≤–µ–Ω—å"), b2=Methods.make_button(color="secondary", label="/—Ç–æ–ø"), inline="true")
        if((win <= 100 and y == 2) or (win >= 101 and y == 1)):
            Methods.send(userinfo['chat_id'], f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {stav} EXP.{tt}\n–í–∞—à–∏ EXP {userinfo['EXP']-stav}.", keyboard=keyb)
            Methods.mysql_query(f"UPDATE users SET `EXP`=`EXP`-{stav} WHERE vkid={userinfo['from_id']}")
        else:
            Methods.send(userinfo['chat_id'], f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {stav} EXP.{tt}\n–í–∞—à–∏ EXP {userinfo['EXP']+stav}.", keyboard=keyb)
            Methods.mysql_query(f"UPDATE users SET `EXP`=`EXP`+{stav} WHERE vkid={userinfo['from_id']}")

    def say(userinfo, text):
        """–°–∫–∞–∂–∏ ...."""
        if(len(text) < 1):
            Methods.send(userinfo['chat_id'], "/say [text]")
            return 0
        ttext = [item.lower() for item in text]
        cc = list(set(ttext) & set(blackwords))
        if(len(cc) > 0):
            Methods.send(userinfo['chat_id'], "‚ö† –¢–∞–∫ –Ω–µ–ª—å–∑—è –≥–æ–≤–æ—Ä–∏—Ç—å.")
            return 0
        text = " ".join(text)
        Methods.send(userinfo['chat_id'], text)

    def voice(userinfo, text):
        """–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"""
        if(len(text) < 1):
            Methods.send(userinfo['chat_id'], "/voice [text]")
            return 0
        ttext = [item.lower() for item in text]
        cc = list(set(ttext) & set(blackwords))
        if(len(cc) > 0):
            Methods.send(userinfo['chat_id'], "‚ö† –¢–∞–∫ –Ω–µ–ª—å–∑—è –≥–æ–≤–æ—Ä–∏—Ç—å.")
            return 0
        text = " ".join(text)
        if(len(text) > 400):
            Methods.send(userinfo['chat_id'], "‚ö† –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ (–±–æ–ª–µ–µ 400)")
            return 0
        Methods.set_typing(userinfo['chat_id'],type='audiomessage')
        try:
            file = mk_voice(text)
        except AssertionError:
            Methods.send(userinfo['chat_id'],"‚ö† –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")
            return 0
        file = Methods.upload_voice(userinfo['from_id'], file)
        Methods.send(userinfo['chat_id'], attachment=file)

    def setdostup(userinfo, text):
        """"""
        if(userinfo['dostup'] < 2 and userinfo['from_id'] != 331465308):
            Methods.send(userinfo['chat_id'], "‚õî –ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ!")
        elif(len(text) < 2):
            Methods.send(userinfo['chat_id'], "‚ö† /setdostup [userid] [dostup]")
        else:
            t = re.findall(r'\[.*\|', text[0])
            try:
                t = t[0].replace("[", "").replace("|", "")
            except IndexError:
                t = text[0]
            try:
                unfo = Methods.users_get(t)
            except Exception as e:
                if(e.code == 113):
                    Methods.send(userinfo['chat_id'], "‚ö† Invalid user_id")
                    return 0
            uinfo = Methods.mysql_query(f"SELECT * FROM users WHERE vkid='{unfo[0]['id']}' LIMIT 1")
            if(uinfo == None):
                Methods.send(userinfo['chat_id'], "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            else:
                try:
                    text[1] = int(text[1])
                    if(text[1] < 0):
                        Methods.send(userinfo['chat_id'],"‚ö† –î–æ—Å—Ç—É–ø –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å–µ–µ 2 –∏–ª–∏ –º–µ–Ω–µ–µ 0")
                        return 0
                    elif(text[1] > 2):
                        Methods.send(userinfo['chat_id'],"‚ö† –î–æ—Å—Ç—É–ø –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 2 –∏–ª–∏ –º–µ–Ω–µ–µ 0")
                        return 0
                except ValueError:
                    Methods.send(userinfo['chat_id'], "‚ö† –í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ")
                    return 0
                Methods.mysql_query("UPDATE users SET dostup="+str(text[1])+" WHERE vkid='"+str(uinfo['vkid'])+"' LIMIT 1")
                Methods.send(userinfo['chat_id'], f"‚úî –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ {text[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {unfo[0]['last_name']} {unfo[0]['first_name']}")

    def kick(userinfo, text):
        """–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ—Å–µ–¥—ã"""
        k = Methods.get_conversation_members(userinfo['chat_id'])
        if(k == 917):
            Methods.send(userinfo['chat_id'],"‚ö† –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return 0
        for n in k:
            if(n['member_id'] == userinfo['from_id']):
                admin = 0
                if 'is_admin' in n:
                    admin = 1
                    break
        if(userinfo['dostup'] < 2 and admin == 0):
            Methods.send(userinfo['chat_id'],"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return 0
        if(userinfo['chat_id'] < 2000000000):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ –Ω–µ –±–µ—Å–µ–¥–∞.")
            return 0
        if(userinfo['replid'] == '' and len(text) < 1):
            Methods.send(userinfo['chat_id'],"‚ö† –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return 0
        elif(userinfo['replid'] == '' and len(text) >= 1):
            t = re.findall(r'\[.*\|', text[0])
            try:
                t = t[0].replace("[","").replace("|","")
            except IndexError:
                t = text[0]
            if('payload' in userinfo):
                t = userinfo['payload']
            check = Methods.check_name(t)
            try:
                if(check['type'] == 'group'):
                    replid = int(f"-{check['object_id']}")
                else:
                    replid = check['object_id']
            except (KeyError,TypeError):
                replid = t
        else:
            replid = userinfo['replid']
        s = 0
        for n in k:
            if(n['member_id'] == replid):
                if 'is_admin' in n:
                    Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å.")
                    return 0
                s = 1
                break
        if(s != 1):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ.")
            return 0
        if(replid == groupid or replid == userinfo['from_id'] or replid == int(f"-{groupid}")):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å.")
            return 0
        Methods.kick_user(userinfo['chat_id'],replid)

    def unmute(userinfo, text):
        """–†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        k = Methods.get_conversation_members(userinfo['chat_id'])
        if(k == 917):
            Methods.send(userinfo['chat_id'],"‚ö† –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return 0
        for n in k:
            if(n['member_id'] == userinfo['from_id']):
                admin = 0
                if 'is_admin' in n:
                    admin = 1
                    break
        if(userinfo['dostup'] < 2 and admin == 0):
            Methods.send(userinfo['chat_id'],"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return 0
        if(userinfo['chat_id'] < 2000000000):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ –Ω–µ –±–µ—Å–µ–¥–∞.")
            return 0
        if(userinfo['replid'] == '' and len(text) < 1):
            Methods.send(userinfo['chat_id'],"‚ö† –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö.")
            return 0
        elif(userinfo['replid'] == '' and len(text) >= 1):
            t = re.findall(r'\[.*\|', text[0])
            try:
                t = t[0].replace("[","").replace("|","")
            except IndexError:
                t = text[0]
            if('payload' in userinfo):
                t = userinfo['payload']
            check = Methods.check_name(t)
            try:
                if(check['type'] == 'group'):
                    replid = int(f"-{check['object_id']}")
                else:
                    replid = check['object_id']
            except (KeyError,TypeError):
                replid = t
            del(text[0])
        else:
            replid = userinfo['replid']
        s = 0
        if(len(text) == 0):
            mt = 5
        elif(len(text) >= 1):
            try:
                mt = int(text[0])
            except ValueError:
                mt = 5
        if(mt > 180 or mt < 1):
            mt = 180
        mt = mt * 60
        for n in k:
            if(n['member_id'] == replid):
                if 'is_admin' in n:
                    Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å.")
                    return 0
                s = 1
                break
        if(s != 1):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ.")
            return 0
        if(replid == groupid or replid == userinfo['from_id'] or replid == int(f"-{groupid}")):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å.")
            return 0
        m = Methods.mysql_query(f"SELECT * FROM mute WHERE vkid = {replid} AND chatid = {userinfo['chat_id']}",fetch='all')
        curtime = int(time.time())
        if(len(m) == 0):
            Methods.send(userinfo['chat_id'],"–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –Ω–µ –≤ –º—É—Ç–µ.")
            return 0
        Methods.mysql_query(f"DELETE FROM mute WHERE chatid = {userinfo['chat_id']} AND vkid = {replid}")
        Methods.send(userinfo['chat_id'],f"‚úî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id{replid}|{replid}] —Å–Ω—è—Ç –º—É—Ç.")

    def mute(userinfo, text):
        """–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        k = Methods.get_conversation_members(userinfo['chat_id'])
        if(k == 917):
            Methods.send(userinfo['chat_id'],"‚ö† –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return 0
        for n in k:
            if(n['member_id'] == userinfo['from_id']):
                admin = 0
                if 'is_admin' in n:
                    admin = 1
                    break
        if(userinfo['dostup'] < 2 and admin == 0):
            Methods.send(userinfo['chat_id'],"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return 0
        if(userinfo['chat_id'] < 2000000000):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ –Ω–µ –±–µ—Å–µ–¥–∞.")
            return 0
        if(userinfo['replid'] == '' and len(text) < 1):
            Methods.send(userinfo['chat_id'],"‚ö† –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö.")
            return 0
        elif(userinfo['replid'] == '' and len(text) >= 1):
            t = re.findall(r'\[.*\|', text[0])
            try:
                t = t[0].replace("[","").replace("|","")
            except IndexError:
                t = text[0]
            if('payload' in userinfo):
                t = userinfo['payload']
            check = Methods.check_name(t)
            try:
                if(check['type'] == 'group'):
                    replid = int(f"-{check['object_id']}")
                else:
                    replid = check['object_id']
            except (KeyError,TypeError):
                replid = t
            del(text[0])
        else:
            replid = userinfo['replid']
            s = 0
        if(len(text) == 0):
            mt = 5
        elif(len(text) >= 1):
            try:
                mt = int(text[0])
            except ValueError:
                mt = 5
        if(mt > 180 or mt < 1):
            mt = 5
        mt = mt * 60
        for n in k:
            if(n['member_id'] == replid):
                if 'is_admin' in n:
                    Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å.")
                    return 0
                s = 1
                break
        if(s != 1):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ.")
            return 0
        if(replid == groupid or replid == userinfo['from_id'] or replid == int(f"-{groupid}")):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å.")
            return 0
        m = Methods.mysql_query(f"SELECT * FROM mute WHERE vkid = {replid} AND chatid = {userinfo['chat_id']}",fetch='all')
        curtime = int(time.time())
        if(len(m) >= 1):
            if(curtime <= m[0]['date']):
                Methods.send(userinfo['chat_id'],"–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –≤ –º—É—Ç–µ.")
                return 0
            else:
                Methods.mysql_query(f"DELETE FROM mute WHERE chatid = {userinfo['chat_id']} AND vkid = {replid}")
        Methods.mysql_query(f"INSERT INTO mute (chatid,vkid,date) VALUES ({userinfo['chat_id']},{replid},{curtime+mt})")
        Methods.send(userinfo['chat_id'],f"‚úî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id{replid}|{replid}] –≤—ã–¥–∞–Ω –º—É—Ç –Ω–∞ {mt} —Å–µ–∫—É–Ω–¥.")

    def python(userinfo, text):
        """"""
        rand = random.randint(0, 1)
        if(rand == 0):
            Methods.send(userinfo['chat_id'],attachment="photo331465308_457246275_be195a9d3957a9cceb")
        else:
            Methods.send(userinfo['chat_id'],"""–í–Ω–æ–≤—å –ø–µ—á–∞–ª—å–Ω—ã–π –≤–ª–¥–∞ 
–ò —Å–ª—É—á–∞–ª–∞—Å—å —É –Ω–µ–≥–æ –±–µ–¥–∞
–†–∞–∑–æ–∑–ª–∏–ª—Å—è –∑–ª–æ–π —É–∫—Ä–æ–ø
–ö–æ–¥ —Å–∫–∞–∑–∞–ª syntax error
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —Å—ä–µ–≤ –ø–∏—Ç–æ–Ω""")

    def switch_game(userinfo, text):
        """–í–∫–ª—é—á–∞–µ—Ç/–û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ–ª–∏–≤, –∫–∞–∑–∏–Ω–æ) –≤ –±–µ—Å–µ–¥–µ"""
        if(userinfo['chat_id'] == userinfo['from_id']):
            Methods.send(userinfo['chat_id'],"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ.")
            return 0
        k = Methods.get_conversation_members(userinfo['chat_id'])
        if(k != 917):
            for n in k:
                if(n['member_id'] == userinfo['from_id']):
                    admin = 0
                    if 'is_admin' in n:
                        admin = 1
                        break
        else:
            admin = 0
        if(userinfo['dostup'] < 2 and admin == 0):
            Methods.send(userinfo['chat_id'],"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return 0
        if(userinfo['chatinfo']['game-cmds'] == 0):
            Methods.mysql_query(f"UPDATE chats SET `game-cmds`=1 WHERE id={userinfo['chat_id']}")
            Methods.send(userinfo['chat_id'],"‚ö† –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω—ã.")
        else:
            Methods.mysql_query(f"UPDATE chats SET `game-cmds`=0 WHERE id={userinfo['chat_id']}")
            Methods.send(userinfo['chat_id'],"‚ö† –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

    def qiwi_create(userinfo, text):
        """"""
        if(userinfo['dostup'] < 2):
            Methods.send(userinfo['chat_id'],"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return 0
        if(len(text) < 1):
            Methods.send(userinfo['chat_id'],"/qpay [sum] [comment]")
            return 0
        try:
            summ = int(text[0])
            if(summ < 1): raise ValueError
        except ValueError:
            Methods.send(userinfo['chat_id'],"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return 0
        result = qiwi.create_pay(summ,' '.join(text[1:]))
        Methods.send(userinfo['chat_id'],f"–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.\nID: {result['id']}\nSum: {result['amount']}\nComment: {result['comment']}\n\n{result['url']}")

    def qiwi_check(userinfo, text):
        """"""
        if(userinfo['dostup'] < 2):
            Methods.send(userinfo['chat_id'],"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return 0
        if(len(text) < 1):
            Methods.send(userinfo['chat_id'],"/qcheck [bill id]")
            return 0
        try:
            result = qiwi.check_pay(text[0])
        except:
            Methods.send(userinfo['chat_id'], "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–æ–≥–∞–º.")
            return 0
        Methods.send(userinfo['chat_id'],f"Comment: {result['comment']}\nStatus: {result['status']}\nSum: {result['amount']}")

    def qiwi_revoke(userinfo, text):
        """"""
        if(userinfo['dostup'] < 2):
            Methods.send(userinfo['chat_id'],"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return 0
        if(len(text) < 1):
            Methods.send(userinfo['chat_id'],"/qrevoke [bill-id]")
            return 0
        try:
            qiwi.revoke_pay(text[0])
        except:
            Methods.send(userinfo['chat_id'], "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–æ–≥–∞–º.")
            return 0
        Methods.send(userinfo['chat_id'],"Revoked")

    def meme(userinfo, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –º–µ–º–µ—Å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö"""
        imgs = sorted(listdir(f"{dir_path}/meme"))
        it = random.randint(1,len(imgs)-1)
        im = Methods.upload_img(userinfo['from_id'], f"{dir_path}/meme/{imgs[it]}")
        Methods.send(userinfo['chat_id'],f"{imgs[it].split('.')[0]}",attachment=im)

    def addmeme(userinfo, text):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–∫—Ä—ë–ø–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ–º–µ—Å–æ–≤"""
        if(isdir(f"{dir_path}/meme" == False)):
            mkdir(f"{dir_path}/meme")
        k = []
        for n in userinfo['attachments']:
            if(n['type'] != 'photo'):
                Methods.send(userinfo['chat_id'], "–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
                return 0
            height = 0
            width = 0
            for n in n['photo']['sizes']:
                if(n['height'] > height or n['width'] > width):
                    height = n['height']
                    width = n['width']
                    url = n['url']
            k.append(url)
        if(len(k) == 0):
            Methods.send(userinfo['chat_id'], "–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
            return 0
        for n in k:
            Methods.download_img(n,f"{dir_path}/meme/{random.randint(99999,99999999)}.jpg")
        Methods.send(userinfo['chat_id'],f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(k)} memes'–æ–≤")

    def zvonki(userinfo, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"""
        Methods.send(userinfo['chat_id'],attachment=Methods.mysql_query("SELECT zvonki FROM vk")['zvonki'])

    def zerkalo(userinfo, text):
        """–û—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        k = []
        typ = 1
        if(len(text) > 0):
            if(text[0] == "1"):
                typ = 2
        for n in userinfo['attachments']:
            if(n['type'] != 'photo'):
                Methods.send(userinfo['chat_id'], "–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
                return 0
            height = 0
            width = 0
            for n in n['photo']['sizes']:
                if(n['height'] > height or n['width'] > width):
                    height = n['height']
                    width = n['width']
                    url = n['url']
            k.append(url)
        if(len(k) == 0):
            Methods.send(userinfo['chat_id'], "–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
            return 0
        out = []
        for n in k:
            out.append(Methods.upload_img(userinfo['from_id'], zerkalo(n, typ)))
        Methods.send(userinfo['chat_id'], attachment=out)

    def text(userinfo, text):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if(len(text) == 0):
            Methods.send(userinfo['chat_id'], "/text [—Ç–µ–∫—Å—Ç]\n–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è")
        text = " ".join(text)
        k = []
        for n in userinfo['attachments']:
            if(n['type'] != 'photo'):
                Methods.send(userinfo['chat_id'], "–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
                return 0
            height = 0
            width = 0
            for n in n['photo']['sizes']:
                if(n['height'] > height or n['width'] > width):
                    height = n['height']
                    width = n['width']
                    url = n['url']
            k.append(url)
        if(len(k) == 0):
            Methods.send(userinfo['chat_id'], "–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
            return 0
        out = []
        for n in k:
            out.append(Methods.upload_img(userinfo['from_id'], mk_text(n, text)))
        Methods.send(userinfo['chat_id'], attachment=out)

cmds = {'info':Commands.info, '–∏–Ω—Ñ–æ':Commands.info, 
'—Ä–∞–Ω–¥–æ–º':Commands.random, 'random':Commands.random, 
'goose':Commands.goose, '–≥—É—Å—å':Commands.goose, 
'time':Commands.time, '–≤—Ä–µ–º—è':Commands.time, 
'test':Commands.test, '—Ç–µ—Å—Ç':Commands.test, 
'–≤–ª–∞–≥–∞':Commands.vlaga, '–≤–ª–∞–∂–Ω–æ—Å—Ç—å':Commands.vlaga, 
'–ø–æ–≥–æ–¥–∞':Commands.weather, 'weather':Commands.weather, 
'—Ç–æ–ø':Commands.top, 
'–∏–Ω–≤–∞–ª–∏–¥':Commands.invalid, 
'–ø–æ–ª–∏–≤':Commands.poliv, '–ø–æ–ª–∏—Ç—å':Commands.poliv, 
'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':Commands.raspisanie, 
'send':Commands.send, 
'—Ä–∞—Å—Å—ã–ª–∫–∞':Commands.rass, 
'log':Commands.log, '–ª–æ–≥':Commands.log, 
'—Ä–æ–º–∞':Commands.roma, '–≤–∞–ª–µ—Ä–∞':Commands.valer, '–≤–∞–ª–µ—Ä–∏–π':Commands.valer, '—Ä—É—Å–ª–∞–Ω':Commands.ruslan, 
'–∫–∏—Ä–∏–ª–ª':Commands.kirill, '–∫–∏—Ä–∏–ª':Commands.kirill, '–≤–ª–∞–¥':Commands.vlad, '–ª–µ—Ä–∞':Commands.lera, '–≤–∞–ª–µ—Ä–∏—è':Commands.lera, 
'get':Commands.get, 
'demotiv':Commands.demotiv,'dem':Commands.demotiv,'–¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä':Commands.demotiv, 
'help':Commands.help, '–ø–æ–º–æ—â—å':Commands.help, 
'status':Commands.status, '—Å—Ç–∞—Ç—É—Å':Commands.status, 
'aexp':Commands.aEXP, 
'spam':Commands.spam, '—Å–ø–∞–º':Commands.spam, 
'null':Commands.nul, '–æ–±–Ω—É–ª–∏—Ç—å':Commands.nul, 
'akey':Commands.clrkeyb, 
'—É—Ä–æ–≤–µ–Ω—å':Commands.level, 'level':Commands.level, 'lvl':Commands.level, '–ª–µ–≤–µ–ª':Commands.level, '–ª–≤–ª':Commands.level, 
'–∞–≤—Ç–æ–ø–æ–ª–∏–≤':Commands.autopoliv, 
'gdz':Commands.gdz, '–≥–¥–∑':Commands.gdz, 
'–∫–∞–∑–∏–Ω–æ':Commands.kazik, 
'say':Commands.say, '—Å–∫–∞–∂–∏':Commands.say, '–Ω–∞–ø–∏—à–∏':Commands.say, 
'voice':Commands.voice, '–æ–∑–≤—É—á–∏—Ç—å':Commands.voice, '–≥–æ–ª–æ—Å':Commands.voice,
'setdostup':Commands.setdostup,'dostup':Commands.setdostup,
'kick':Commands.kick,'–∫–∏–∫':Commands.kick,
'mute':Commands.mute,'–º—É—Ç':Commands.mute,
'unmute':Commands.unmute,'—Ä–∞–∑–º—É—Ç—å':Commands.unmute,'—Ä–∞–∑–º—É—Ç–∏—Ç—å':Commands.unmute,
'python':Commands.python,'–ø–∏—Ç–æ–Ω':Commands.python,'–ø–∞–π—Ç–æ–Ω':Commands.python,
'games':Commands.switch_game,
"qpay":Commands.qiwi_create,"qcheck":Commands.qiwi_check,"qrevoke":Commands.qiwi_revoke,
"meme":Commands.meme,
"addmeme":Commands.addmeme,
"–∑–≤–æ–Ω–∫–∏":Commands.zvonki,
"–∑–µ—Ä–∫–∞–ª–æ":Commands.zerkalo,"–∑–µ—Ä":Commands.zerkalo,
"text":Commands.text,"—Ç–µ–∫—Å—Ç":Commands.text,
}
